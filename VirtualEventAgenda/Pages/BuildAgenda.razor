@page "/BuildAgenda"
@using VirtualEventAgenda.Models
@using VirtualEventAgenda.Data
@using System.Linq

@inject JsonFileAgendaTopicService AgendaTopicsService
<h1>Agenda Bearbeiten</h1>
<p>Aktuelle Stand der Agenda und Reihenfolge der Session:</p>

<table class="table" width="80%">
    <thead>
        <tr>
            <th></th>
            <th>Start</th>
            <th>End</th>
            <th>Title</th>
            <th>Order</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var AgendaTopic in AgendaTopics.OrderBy(t => t.OrderId ?? int.MaxValue))
        {
            <tr>
                <td><button class="btn btn-sm btn-info" type="button" @onclick=" e => SelectAgendaTopic(AgendaTopic.Id.ToString())" data-toggle="modal" data-target="#AgandaTopicModal">Edit</button></td>
                <td>@AgendaTopic.StartTime</td>
                <td>@AgendaTopic.EndTime</td>
                <td>@AgendaTopic.Title</td>
                <td><input @bind="@AgendaTopic.OrderId" class="form-text-orderID"  /></td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-success" type="button" @onclick="NewAgendaTopic">New</button>
<button class="btn btn-primary" type="button" @onclick="HandleSubmit">Save</button>


@if (showDialog)
{

    <div class="modal fade show " id="AgandaTopicModal" style="display:block" role="dialog" >
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="AgandaTopicTitle">@selectedAgendaTopic.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="DialogCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <table>
                        <tr>
                            <td>Title:</td>
                            <td><input @bind="selectedAgendaTopic.Title" class="form-text"/></td>
                        </tr>
                        <tr>
                            <td>Start:</td>
                            <td><input @bind="selectedAgendaTopic.StartTime" class="form-text"/></td>
                        </tr>
                        <tr>
                            <td>End:</td>
                            <td><input @bind="selectedAgendaTopic.EndTime" class="form-text" /></td>
                        </tr>
                        <tr>
                            <td>Description:</td>
                            <td><textarea @bind="selectedAgendaTopic.Description" rows="5" class="form-text" /></td>
                        </tr>
                        <tr>
                            <td>PPT-URL:</td>
                            <td><textarea @bind="selectedAgendaTopic.PresentationUrl" rows="3" class="form-text" /></td>
                        </tr>
                        <tr>
                            <td>Teams-URL:</td>
                            <td><textarea @bind="selectedAgendaTopic.TeamsUrl" rows="3" class="form-text" /></td>
                        </tr>
                        <tr>
                            <td>Order</td>
                            <td><input @bind="selectedAgendaTopic.OrderId"  class="form-text"/></td>
                        </tr>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="DialogCancel">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DialogSave">Save</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<AgendaTopic> AgendaTopics;
    AgendaTopic selectedAgendaTopic;
    string selectedAgendaTopicID;
    bool showDialog = false;
    int maxID = 0;
    int? maxOrderID = 0;


    protected override void OnInitialized()
    {
        AgendaTopics = AgendaTopicsService.GetAgendaTopics().ToList();
        maxID = AgendaTopics.Max(i => i.Id);
        maxOrderID = AgendaTopics.Max(i => i.OrderId);
    }

    private void HandleSubmit()
    {
        AgendaTopicsService.SaveAgendaTopicsAsync(AgendaTopics.ToArray()).Wait();
    }



    void SelectAgendaTopic(string AgendaTopicID)
    {
        selectedAgendaTopicID = AgendaTopicID;
        selectedAgendaTopic = AgendaTopicsService.GetAgendaTopics().First(x => x.Id.ToString() == AgendaTopicID);
        showDialog = true;
    }

    void DialogCancel() => showDialog = false;

    void DialogSave()
    {
        //Save the selected Item to the AgendaTopic
        AgendaTopics.First(x => x.Id == selectedAgendaTopic.Id).Title  = selectedAgendaTopic.Title;
        AgendaTopics.First(x => x.Id == selectedAgendaTopic.Id).StartTime  = selectedAgendaTopic.StartTime;
        AgendaTopics.First(x => x.Id == selectedAgendaTopic.Id).EndTime  = selectedAgendaTopic.EndTime;
        AgendaTopics.First(x => x.Id == selectedAgendaTopic.Id).PresentationUrl  = selectedAgendaTopic.PresentationUrl;
        AgendaTopics.First(x => x.Id == selectedAgendaTopic.Id).TeamsUrl  = selectedAgendaTopic.TeamsUrl;
        AgendaTopics.First(x => x.Id == selectedAgendaTopic.Id).OrderId  = selectedAgendaTopic.OrderId;
        AgendaTopics.First(x => x.Id == selectedAgendaTopic.Id).Description = selectedAgendaTopic.Description;
        AgendaTopicsService.SaveAgendaTopicsAsync(AgendaTopics.ToArray()).Wait();
        showDialog = false;
    }

    void NewAgendaTopic()
    {
        AgendaTopic newEntry = new AgendaTopic();
        newEntry.Id = maxID + 1;
        newEntry.OrderId = maxOrderID + 1;
        AgendaTopics.Add(newEntry);
        this.DialogSave();
    }
}


